//
//  ViewController.swift
//  Meme1
//
//  Created by Kelli Lee on 8/18/21.
//

import UIKit

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UITextFieldDelegate{
    
    override func viewWillAppear(_ animated: Bool) {
    
    super.viewWillAppear(animated)
        self.topText.delegate = self
        self.bottomText.delegate = self
        subscribeToKeyboardNotifications()
        cameraButton.isEnabled = UIImagePickerController.isSourceTypeAvailable(.camera)
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.delegate = self
        textField.resignFirstResponder()
        return true
    }
    
    override func viewWillDisappear(_ animated: Bool) {

        super.viewWillDisappear(animated)
        unsubscribeFromKeyboardNotifications()
    }
    
    //MARK: Keyboard control functions
    
   
   
    
    func subscribeToKeyboardNotifications() {

        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_:)), name: UIResponder.keyboardWillShowNotification, object: nil)
    }

  func unsubscribeFromKeyboardNotifications() {

     NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)), name: UIResponder.keyboardWillHideNotification, object: nil)
 }
    
    @objc func keyboardWillShow(_ notification:Notification) {
    if bottomText.isEditing {
      view.frame.origin.y -= getKeyboardHeight(notification)
    }
 }

    
    @objc func keyboardWillHide(_ notification:Notification) {
    if bottomText.isEditing {
      view.frame.origin.y = 0
        }
    }
    
    func getKeyboardHeight(_ notification:Notification) -> CGFloat {

           let userInfo = notification.userInfo
           let keyboardSize = userInfo![UIResponder.keyboardFrameEndUserInfoKey] as! NSValue // of CGRect
           return keyboardSize.cgRectValue.height
       }
    
//MARK: Life Cycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print ("view loaded successfully")
        
        //Text style attributes
        let defaultTextAttributes: [NSAttributedString.Key: Any] = [
            NSAttributedString.Key.strokeColor: UIColor.black,
            NSAttributedString.Key.foregroundColor: UIColor.white,
            NSAttributedString.Key.font: UIFont(name: "Helvetica", size: 36)!,
            NSAttributedString.Key.strokeWidth: -3.0
           
        ]
        
        topText.text = "TOP"
        
        bottomText.text = "BOTTOM"
        
        //Top text attributes
        topText.defaultTextAttributes = defaultTextAttributes
      
        
        //Bottom text attributes
        bottomText.defaultTextAttributes = defaultTextAttributes
        
        topText.textAlignment = .center
        bottomText.textAlignment = .center
        
        topText.clearsOnBeginEditing = true
        bottomText.clearsOnBeginEditing = true
        
        
        
    }
    
    //MARK: Text Field functions - Do I even need these?
    
    // Set the two delegates
    //self.topText.delegate = self!
    //self.bottomText.delegate = self!
    //func textFieldDidBeginEditing(_ textField: UITextField) {
   
           // if textField.text == "Top" {
           // topText.text = ""
           // }
    
           // else if textField.text == "Bottom" {
            //bottomText.text = ""
           // }
  
       // }
    
   

    @IBOutlet weak var topText: UITextField!
    @IBOutlet weak var bottomText: UITextField!
    @IBOutlet weak var imagePickerView: UIImageView!
    @IBOutlet weak var cameraButton: UIBarButtonItem!
    
//MARK: Get Images Functions
    //Get picture from photo album
    @IBAction func pickAnImageFromAlbum(_ sender:Any) {

        let imagePicker = UIImagePickerController()
        imagePicker.delegate = self
        imagePicker.sourceType = .photoLibrary
        present(imagePicker, animated: true, completion: nil)
        print("this ran")
    }
    
    //Get picture from camera
    @IBAction func getImageFromCamera(_ sender: Any) {
        let imagePicker = UIImagePickerController()
        if (UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.camera)) {
            imagePicker.delegate = self
            imagePicker.sourceType = .camera
            present(imagePicker, animated: true, completion: nil)
        }
        else {
            let alert = UIAlertController(title: "Warning", message: "No access to your camera", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            present(alert, animated: true, completion: nil)
        }
    }
    
   
    
   
    
    //Delegate is told whether user has selected an image or a video.
    func imagePickerController(_ picker:UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]) {
        print("checking image source type")
        if let image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {
            imagePickerView.contentMode = .scaleAspectFill
            imagePickerView.image = image
   }
    dismiss(animated: true, completion: nil)
   }
    
    
  
}




